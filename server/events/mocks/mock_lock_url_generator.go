// Automatically generated by pegomock. DO NOT EDIT!
// Source: github.com/runatlantis/atlantis/server/events (interfaces: LockURLGenerator)

package mocks

import (
	"reflect"

	pegomock "github.com/petergtz/pegomock"
)

type MockLockURLGenerator struct {
	fail func(message string, callerSkip ...int)
}

func NewMockLockURLGenerator() *MockLockURLGenerator {
	return &MockLockURLGenerator{fail: pegomock.GlobalFailHandler}
}

func (mock *MockLockURLGenerator) GenerateLockURL(lockID string) string {
	params := []pegomock.Param{lockID}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GenerateLockURL", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem()})
	var ret0 string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
	}
	return ret0
}

func (mock *MockLockURLGenerator) VerifyWasCalledOnce() *VerifierLockURLGenerator {
	return &VerifierLockURLGenerator{mock, pegomock.Times(1), nil}
}

func (mock *MockLockURLGenerator) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierLockURLGenerator {
	return &VerifierLockURLGenerator{mock, invocationCountMatcher, nil}
}

func (mock *MockLockURLGenerator) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierLockURLGenerator {
	return &VerifierLockURLGenerator{mock, invocationCountMatcher, inOrderContext}
}

type VerifierLockURLGenerator struct {
	mock                   *MockLockURLGenerator
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
}

func (verifier *VerifierLockURLGenerator) GenerateLockURL(lockID string) *LockURLGenerator_GenerateLockURL_OngoingVerification {
	params := []pegomock.Param{lockID}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GenerateLockURL", params)
	return &LockURLGenerator_GenerateLockURL_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type LockURLGenerator_GenerateLockURL_OngoingVerification struct {
	mock              *MockLockURLGenerator
	methodInvocations []pegomock.MethodInvocation
}

func (c *LockURLGenerator_GenerateLockURL_OngoingVerification) GetCapturedArguments() string {
	lockID := c.GetAllCapturedArguments()
	return lockID[len(lockID)-1]
}

func (c *LockURLGenerator_GenerateLockURL_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}
